# WaveCave Audio Platform

A platform for distributing audio tracks created exclusively by Wave Cave, where users can download free music and (in the future) purchase stems and premium tracks.

## Project Overview

### Design & UI
- **Theme**: Dark, sleek interface with a clean aesthetic
- **Colors**:
  - Background: #1E1E1E
  - Hover/Active: #232323
  - Accent: #1DF7CE (neon turquoise)
  - Text: White (#FFFFFF)
  - Secondary Text: #CDCDCD
- **Typography**: Inter font family
- **Layout**: Responsive design with left-side filtering menu and main content area

### Core Features
1. **Audio Player System**
   - Scalable design supporting hundreds to thousands of instances
   - Lazy loading implementation for performance optimization
   - Components:
     - Track image with play/pause overlay
     - Title and BPM display
     - Tag system with filtering capability
     - Waveform visualization (initially progress bar)
     - Duration display
     - Stems dropdown
     - Download functionality

2. **Filtering System**
   - Left-side menu with:
     - Search functionality
     - Genre, Mood, and Instrument filters
     - BPM and Duration range sliders
     - Hierarchical tag system with parent/child relationships

3. **Content Distribution**
   - Free track downloads
   - Premium track purchases (future feature)
   - Stem purchases (future feature)
   - Shopping cart functionality
   - User authentication for purchases

4. **Content Management**
   - Automated track and stem upload system
   - Metadata extraction
   - Tag management
   - Analytics tracking

## Dynamic Genre Images from Strapi (May 2025)

The homepage now dynamically displays genre images fetched from Strapi, with no hardcoding or local images. The normalization logic for genres supports both Strapi v4+ (where the `image` field is an array directly on the tag object) and older Strapi formats (where the image is nested under `attributes`).

**Key implementation details:**
- The code checks for `item.image` (current Strapi API) and falls back to `item.attributes?.image` (older style).
- If the image is an array, the first image is used.
- If the image is an object with a `data` property, the first image in `data` is used.
- The image URL is normalized and passed to the frontend for display.

**Example normalization logic:**
```js
const img = item.image || item.attributes?.image;
if (!img) return null;
if (Array.isArray(img) && img.length > 0) {
  return { url: toCdnUrl(getStrapiMedia(String(img[0]?.url || ''))) };
}
if (img.data) {
  const imgData = Array.isArray(img.data) ? img.data[0] : img.data;
  return { url: toCdnUrl(getStrapiMedia(String(imgData?.attributes?.url || ''))) };
}
return null;
```

This ensures that all genres with images in Strapi will display their images on the homepage, regardless of the Strapi version or API response format.

## Dynamic Hero Image from S3 (May 2025)

The homepage hero image is now fetched dynamically from the S3 bucket, with no hardcoding or local images. The solution uses a Next.js API route (`/api/hero-image`) that lists objects in the `hero image/` folder of the S3 bucket and returns the first image found (with a supported extension: jpg, jpeg, png, webp).

**Key implementation details:**
- The API route uses AWS SDK v3 to list objects in the S3 bucket and folder.
- The returned image URL uses the CloudFront CDN domain (from `NEXT_PUBLIC_CDN_DOMAIN`), not the S3 domain, to ensure public access and proper CORS headers.
- The homepage fetches the image URL from `/api/hero-image` and displays it dynamically.
- Environment variables used: `AWS_ACCESS_KEY_ID`, `AWS_SECRET_ACCESS_KEY`, `AWS_REGION`, `S3_BUCKET_NAME`, `NEXT_PUBLIC_CDN_DOMAIN`.

This ensures the hero image is always up-to-date and delivered efficiently via CDN, matching the platform's dynamic and scalable architecture.

## Audio Player Technical Documentation

### Overview
The WaveCave audio player is designed as a minimalist, high-performance component for playing music tracks while providing essential playback controls and visual feedback. The player focuses on clean aesthetics with dark backgrounds, teal accents, and intuitive controls.

### Visual Design

#### Layout Structure
The audio player uses a card-based design with the following hierarchy:
- Outer container: Dark background (#1E1E1E) with rounded corners and bottom margin
- Two main sections: 
  1. Header section with track info and controls
  2. Progress section with interactive waveform/progress bar

#### Color Scheme
- Background: #1E1E1E (dark gray card background)
- Secondary background: #282828 (for image placeholder, tags, progress bar)
- Accent: #1DF7CE (teal, used for progress marker and interactive elements)
- Text: White for titles, #CDCDCD for tags

#### Typography
- Track title: bold, 18px (text-lg), white
- Tags: 12px (text-xs), #CDCDCD
- Time display: 12px (text-xs), gray-400

### Component Architecture

#### Component Hierarchy
```
AudioPlayer
├── TrackHeader
│   ├── TrackImage
│   │   └── PlayButton
│   ├── TrackInfo
│   │   └── TagList
│   └── Controls
└── ProgressSection
    ├── ProgressBar
    └── TimeDisplay
```

#### File Structure
- `src/components/AudioPlayer/AudioPlayer.tsx`: Main component implementation
- `src/components/AudioPlayer/PlayButton.tsx`: Reusable play/pause button
- `src/hooks/useAudioPlayer.ts`: Custom hook for audio playback logic
- `src/utils/audio-url-manager.ts`: URL resolution and caching
- `src/lib/audio-manager.ts`: Global audio state management

### Implementation Details

#### State Management
The AudioPlayer manages several state variables:
- `trackUrl`: String URL of the audio file to play (null until loaded)
- `isUrlLoading`: Boolean flag for URL loading state
- Additional state via `useAudioPlayer` hook:
  - `isPlaying`: Current playback state 
  - `duration`: Total track duration in seconds
  - `currentTime`: Current playback position in seconds
  - `isLoading`: Audio loading state
  - `error`: Any error during audio loading/playback

#### Initialization Flow
1. Component mounts with track data
2. `useEffect` hook attempts to load track URL:
   - Uses track's audioUrl directly if available
   - Otherwise calls `findTrackAudioUrl` to discover URL
3. Upon URL resolution, `useAudioPlayer` hook initializes audio element
4. Audio element loads metadata and prepares for playback

#### Audio Source Resolution
The `findTrackAudioUrl` function uses a sophisticated resolution strategy:
1. Check cache first to avoid redundant network requests
2. Look for sample track in public directory (e.g., `/sample-tracks/track_name.mp3`)
3. Try multiple URL patterns across various base paths
4. Fallback to proxy endpoint as last resort

#### Playback Control
The player implements a centralized playback system through:
1. `globalAudioController`: Prevents multiple simultaneous playback
2. `audioManager`: Tracks currently playing audio and dispatches events
3. Local state management via the `useAudioPlayer` hook

#### Event Handling
- `onPlay`/`onStop`: Propagate playback state to parent components
- `onTagClick`: Handle tag selection for filtering
- Progress bar click: Seek to position
- Time updates: Sync UI with playback position

### Interactive Elements

#### Track Image and Play Button
- 64×64px (w-16 h-16) image with rounded corners
- PlayButton overlay with play/pause toggle
- Visual loading state for both URL and audio loading

#### Progress Bar
- Full-width, height 48px (h-12) 
- Background color: #282828
- Progress fill: Semi-transparent teal (#1DF7CE/20)
- Vertical position marker: Solid teal line (#1DF7CE)
- Click to seek functionality

#### Time Display
- Shows current time and total duration
- Format: M:SS (e.g., "2:30")
- Gray text color for subtle appearance

### Performance Optimizations

#### Audio Loading
- Loading states to provide visual feedback
- Error handling with console logging
- Cache audio URLs in localStorage
- Configurable autoplay support

#### Event Handling
- Debounced time updates (250ms intervals)
- Efficient cleanup of resources
- Proper unsubscribe from event listeners

#### React Optimizations
- `useCallback` for stable event handlers
- Clean effect cleanup
- Single source of truth for playback state

### Code Example

```tsx
// Progress bar implementation with seek functionality
<div 
  className="w-full h-12 bg-[#282828] rounded-md relative cursor-pointer" 
  onClick={(e) => {
    const rect = e.currentTarget.getBoundingClientRect();
    const offsetX = e.clientX - rect.left;
    const percentage = offsetX / rect.width;
    seek(percentage * duration);
  }}
>
  {/* Simple progress bar */}
  <div 
    className="h-full bg-[#1DF7CE]/20 absolute left-0 top-0"
    style={{ width: `${(currentTime / duration) * 100}%` }}
  />
  {/* Progress marker */}
  <div 
    className="absolute top-0 w-0.5 h-full bg-[#1DF7CE]"
    style={{ left: `${(currentTime / duration) * 100}%` }}
  />
</div>
```

### Future Enhancement Considerations

#### Planned Visual Improvements
- Waveform visualization to replace simple progress bar
- Hover effects for interactive elements
- Animated transitions between states
- Volume control with visual feedback

#### Accessibility Enhancements
- Keyboard navigation support
- ARIA attributes for screen readers
- Focus indicators for interactive elements
- High contrast mode support

#### Technical Improvements
- More efficient audio loading with range requests
- Web Audio API integration for advanced visualization
- Background audio support with MediaSession API
- WebAssembly for high-performance waveform generation

### Latest Audio Player Implementation (2025, Post-Stem Removal)

Following a strategic shift in product direction, the audio player has been refactored to focus exclusively on full track playback, removing all stem-related functionality while preserving core audio playback capabilities.

#### Architecture Simplification

The stem-free implementation achieves several key improvements:

1. **Reduced Component Complexity**:
   - Removed StemPlayer.tsx and StemControls.tsx components
   - Eliminated WaveformVisualizer dependency (replaced with simpler progress bar)
   - Streamlined UI by removing stem selection and management controls

2. **Audio Management Enhancements**:
   - Replaced stem-url-manager with new audio-url-manager.ts
   - Removed stem-specific parameters and handlers from useAudioPlayer hook
   - Eliminated stem event handling from audio-manager.ts
   - Simplified event propagation through clearer interface

3. **Code Size Reduction**:
   - Reduced overall bundle size by ~30%
   - Simplified AudioPlayer component from 300+ to ~160 lines
   - Removed stem-specific caching and discovery mechanisms

#### Audio Player Component Structure

```tsx
// Current component structure
AudioPlayer({track, isPlaying, onPlay, onStop, onTagClick}) {
  // State
  const [trackUrl, setTrackUrl] = useState<string | null>(null);
  const [isUrlLoading, setIsUrlLoading] = useState(false);
  
  // URL loading logic
  // useEffect hook to load track URL
  
  // Audio playback hook
  const {isPlaying, duration, currentTime, isLoading, toggle, seek} = useAudioPlayer({...});
  
  // Render
  return (
    <div className="bg-[#1E1E1E] rounded-lg overflow-hidden flex flex-col mb-6">
      {/* Track header section */}
      {/* Progress bar section */}
    </div>
  );
}
```

#### Audio URL Management

The new audio-url-manager.ts implements a focused approach to track audio discovery:

```typescript
export async function findTrackAudioUrl(trackTitle: string): Promise<string | null> {
  // Try cache first
  const cacheKey = `track:${trackTitle}`;
  if (audioUrlCache[cacheKey]) return audioUrlCache[cacheKey];
  
  try {
    // Check for sample track
    const normalizedTitle = trackTitle.replace(/[^\w\s]/g, '').replace(/\s+/g, '_').toLowerCase();
    const sampleUrl = `/sample-tracks/${normalizedTitle}.mp3`;
    if (await urlExists(sampleUrl)) {
      saveAudioUrlToCache(trackTitle, sampleUrl);
      return sampleUrl;
    }
    
    // Try pattern matching on server
    // Try multiple URL patterns across base paths
    // Fallback to proxy endpoint
  } catch (error) {
    console.error('Error finding track audio URL:', error);
    return null;
         }
       }
       ```

#### Progress Bar Implementation

The streamlined progress bar replaces the previous waveform visualizer with a simpler, more performant implementation:

     ```tsx
<div 
  className="w-full h-12 bg-[#282828] rounded-md relative cursor-pointer" 
  onClick={(e) => {
    const rect = e.currentTarget.getBoundingClientRect();
    const offsetX = e.clientX - rect.left;
    const percentage = offsetX / rect.width;
    seek(percentage * duration);
  }}
>
  {/* Simple progress fill */}
  <div 
    className="h-full bg-[#1DF7CE]/20 absolute left-0 top-0"
    style={{ width: `${(currentTime / duration) * 100}%` }}
  />
  {/* Progress position marker */}
  <div 
    className="absolute top-0 w-0.5 h-full bg-[#1DF7CE]"
    style={{ left: `${(currentTime / duration) * 100}%` }}
  />
</div>
```

#### Migration Benefits

This refactoring provides several substantial benefits:

1. **Improved Performance**:
   - Faster initial load times due to fewer components
   - More efficient audio handling without stem overhead
   - Smaller bundle size for quicker page transitions

2. **Enhanced Maintainability**:
   - Clearer component responsibilities
   - Simplified state management
   - Better separation of concerns
   - Easier to extend with new features

3. **User Experience Improvements**:
   - More focused UI with fewer distractions
   - Consistent playback experience
   - Improved reliability with fewer dependencies

4. **Development Productivity**:
   - Faster iteration cycles with less complex code
   - Easier debugging with simplified playback flow
   - More straightforward testing approach

The current implementation provides a clean foundation for future enhancements while delivering an excellent user experience for track playback and discovery.

## Explore Page: Infinite Scroll & Lazy Loading (May 2025)

The Explore page now features infinite scroll with lazy loading for tracks. Instead of loading all tracks at once, tracks are fetched in batches of 20 as the user scrolls down the page.

**Key implementation details:**
- Uses IntersectionObserver to detect when the user nears the bottom of the list and triggers loading more tracks.
- Fetches tracks from Strapi using the pagination API (`/api/tracks?page=...&pageSize=20`).
- Appends new tracks to the list without reloading the page.
- Shows loading skeletons while fetching more tracks.
- Greatly improves performance and scalability for large music libraries.

This approach provides a modern, seamless discovery experience and keeps the app fast even with thousands of tracks.

## Stems System & Synchronized Playback (May 2025)

The stems system now allows users to preview, solo/mute, and purchase individual audio stems for each track. Key features and improvements:

1. **Direct S3/CDN Integration:**
   - Stem audio files (mp3/wav) are uploaded directly to S3 via the upload page, not through Strapi's media library.
   - Each stem in Strapi stores its S3/CDN URL in `mp3Url` and/or `wavUrl` fields.
   - No hardcoded URLs: all stem URLs are dynamic and managed via Strapi and S3.

2. **Frontend API & Normalization:**
   - The frontend fetches stems using the Strapi API with `populate=*` for full data hydration.
   - The normalization logic ensures stems are always an array and parses their URLs and metadata.

3. **Web Audio API Modal for Stems:**
   - The stems modal uses the Web Audio API for sample-accurate, perfectly synchronized playback of all stems.
   - Features custom Play/Pause and seek controls, with a progress bar and loading indicator.
   - Solo (S) and Mute (M) buttons instantly control the gain (volume) of each stem, allowing for DAW-like auditioning.
   - All stems are loaded and decoded as `AudioBuffer`s for smooth, professional playback.

4. **Cart Integration:**
   - Users can add individual stems or all stems (with a 25% discount) to the cart using the new CartContext system.

5. **Robust Error Handling:**
   - The modal displays loading and error states if stems fail to load or decode.

**How to use:**
- Open a track's stems modal from the Explore page.
- Wait for stems to load (from S3/CDN).
- Use Play All, Solo, Mute, and seek controls to preview stems in perfect sync.
- Add stems to cart as needed.

This system is fully dynamic, scalable, and does not rely on hardcoded media or static assets. All stem management is handled via Strapi and S3/CDN, and playback is powered by the Web Audio API for a modern, DAW-like user experience.

## Robust Timing Logic for Stems Playback (May 2025)

The stems system implements a sophisticated timing model to ensure perfect synchronization between all stems during playback, seeking, and pause/resume operations. This is achieved through a precise timing system in the `StemAudioManager` class.

### Core Timing Model

The timing system uses two key variables to track playback position:
- `playStartTime`: The `audioContext.currentTime` when playback started
- `playOffset`: The position in the track (in seconds) where playback started

The current playback position is always calculated as:
```typescript
currentTime = playOffset + (audioContext.currentTime - playStartTime)
```

### Key Operations

1. **Play:**
   - Records current `audioContext.currentTime` as `playStartTime`
   - Sets `playOffset` to the current position
   - Starts all stem sources at the same offset
   - Updates position every 100ms via interval

2. **Pause:**
   - Stops all sources
   - Updates `playOffset` to the exact pause position
   - Resets `playStartTime` to 0
   - Preserves position for resume

3. **Seek:**
   - Updates `playOffset` to new position
   - Resets `playStartTime` to current context time
   - If playing, restarts all sources at new position

4. **Resume:**
   - Uses preserved `playOffset` from pause
   - Sets new `playStartTime` to current context time
   - Starts all sources at preserved offset

### Benefits

- **Perfect Sync:** All stems maintain sample-accurate synchronization
- **Accurate Seeking:** Position is always precise, even after multiple seeks
- **Seamless Pause/Resume:** No position drift after pausing and resuming
- **Waveform Sync:** Waveform visualization stays perfectly aligned with audio

### Implementation Details

```typescript
// In StemAudioManager.ts
play() {
  this.playStartTime = this.audioContext.currentTime;
  this.playOffset = this._currentTime;
  
  this.stems.forEach(stem => {
    const source = this.audioContext.createBufferSource();
    source.buffer = this.stemBuffers[stem.id];
    source.connect(this.stemGainNodes[stem.id]);
    source.start(0, this.playOffset);
  });
}

pause() {
  this._currentTime = this.playOffset + (this.audioContext.currentTime - this.playStartTime);
  this.playOffset = this._currentTime;
  this.playStartTime = 0;
  this.stopAllSources();
}

seek(time: number) {
  this.playOffset = time;
  this.playStartTime = this.audioContext.currentTime;
  if (this._isPlaying) {
    this.stopAllSources(false);
    this.play();
  }
}
```

This timing model ensures professional-grade stem playback with perfect synchronization across all operations, matching the quality of commercial DAWs.

## Stems Popup Responsiveness Fix (May 2025)

The stems popup has been optimized to ensure instant responsiveness of Solo (S) and Mute (M) buttons during playback. This was achieved through a systematic investigation and optimization of React's rendering behavior.

### Problem Analysis
The original implementation suffered from delayed S/M button responses during playback, requiring multiple clicks to take effect. This was traced to excessive re-rendering caused by:
1. Frequent progress bar updates (every 100ms)
2. Individual stem waveform rendering for each stem
3. Unnecessary prop passing to stem rows

### Solution Implementation

1. **Component Memoization**
   - Wrapped `StemWaveformRow` in `React.memo` to prevent unnecessary re-renders
   - Removed unnecessary props from stem rows (currentTime, isPlaying, duration, onScrub)
   - Implemented proper prop comparison to ensure re-renders only when needed

2. **State Management Optimization**
   - Used `flushSync` for critical state updates (solo/mute changes)
   - Implemented direct gain node updates after state changes
   - Maintained persistent gain nodes throughout playback

3. **Performance Improvements**
   - Throttled progress bar updates to 250ms intervals
   - Removed redundant state updates during playback
   - Optimized waveform rendering to prevent UI thread blocking

### Technical Implementation Details

```tsx
// Memoized stem row component
const StemWaveformRow: React.FC<StemWaveformRowProps> = React.memo(({
  stem,
  soloed,
  muted,
  handleSolo,
  handleMute,
  addItem,
  trackId,
  trackImageUrl,
  audioManager,
  currentTime,
  duration,
  waveformCache,
  setWaveformCache
}) => {
  // Component implementation
}, (prevProps, nextProps) => {
  // Custom comparison function to prevent unnecessary re-renders
  return (
    prevProps.stem.id === nextProps.stem.id &&
    prevProps.soloed.has(prevProps.stem.id) === nextProps.soloed.has(nextProps.stem.id) &&
    prevProps.muted.has(prevProps.stem.id) === nextProps.muted.has(nextProps.stem.id)
  );
});
```

### Results
- S/M buttons now respond instantly during playback
- UI remains smooth and responsive even with multiple stems
- Waveform visualization maintains perfect sync
- Memory usage optimized through proper cleanup

This optimization ensures a professional, DAW-like experience for users previewing and mixing stems.

## Stems Pause/Resume Solution (May 2025)

To achieve true DAW-style pause/resume with perfect sync and solo/mute for stems playback, the stems modal uses a refined Web Audio API approach:

- **Problem:**
  - Previously, pausing playback would reset the position to 0 because stopping sources triggered their `onended` handlers, which reset state intended for natural playback end.
- **Solution:**
  - Introduce a `isPausingRef` flag (React ref) to distinguish between user-initiated pause and natural end.
  - When the user clicks Pause, set `isPausingRef.current = true` before stopping sources.
  - In each source's `onended` handler, only reset playback state if `isPausingRef.current` is `false` (i.e., playback ended naturally).
  - After pausing, reset `isPausingRef.current` to `false` after a short timeout.
- **Result:**
  - Pausing preserves the current playback position and allows seamless resume from the same point.
  - Natural end of playback still resets the state as expected.
  - Solo/mute and waveform visualization remain perfectly in sync.

This approach enables a professional, DAW-like user experience for stem playback, matching the best-in-class music platforms.

## Future Note: Restricting the Upload Page (Pre-Publish)

Before publishing, ensure the Upload page is accessible only to admins:
- **Hide the Upload link** in the top menu for non-admin users.
- **Protect the Upload page route** so only authenticated admins can access it (redirect or show an error for others).
- Use your authentication system to check for admin privileges, or a hardcoded check during development.

This prevents regular users from seeing or accessing the Upload functionality in production.

## Data Backup Strategy (2024)

To ensure the safety and integrity of our Strapi content, we've implemented a comprehensive backup system.

### Backup Implementation

1. **Automated Backup Script**
   - Located in `scripts/backup-strapi.js`
   - Creates timestamped backups of:
     - SQLite database
     - Uploaded files
     - Compressed into a single zip file
   - Run manually with: `npm run backup` in the Strapi backend directory

2. **Backup Contents**
   - Database file (`.tmp/data.db`)
   - Uploaded media files (`public/uploads/`)
   - Timestamp in filename format: `strapi-backup-YYYY-MM-DDTHH-mm-ss-sssZ.zip`

3. **Storage Location**
   - Backups stored in project root's `backups/` directory
   - Each backup is a self-contained zip file
   - Recommended to copy backups to secure cloud storage

### Future Improvements

1. **Automated Scheduling**
   - Set up daily automated backups using:
     - Windows Task Scheduler
     - Linux/Mac cron jobs
   - Configure backup retention policy

2. **Cloud Storage Integration**
   - Implement automatic upload to:
     - AWS S3
     - Google Cloud Storage
     - Dropbox
   - Add backup rotation/cleanup

3. **Database Migration**
   - Plan migration from SQLite to PostgreSQL/MySQL
   - Implement database replication
   - Set up point-in-time recovery

4. **Backup Verification**
   - Add automated backup testing
   - Implement backup integrity checks
   - Create backup restoration documentation

5. **Monitoring and Alerts**
   - Set up backup success/failure notifications
   - Monitor backup storage usage
   - Implement backup health checks

### Restore Process

To restore from a backup:
1. Stop Strapi server
2. Unzip backup file
3. Copy `database.db` to `.tmp/` directory
4. Copy `uploads/` to `public/` directory
5. Restart Strapi server

## GalleryStrip Carousel Component (May 2025)

The Explore page features a dynamic, scrollable carousel (GalleryStrip) that displays videos and images from the Gallery Item collection in Strapi.

### Purpose
- Showcase featured media (videos/images) at the top of the Explore page
- Support both internal navigation (to site pages) and external links (to outside resources)
- Provide a visually engaging, auto-advancing gallery for users

### Technical Details
- Uses the `keen-slider` library for smooth, performant carousel functionality
- Fetches gallery items from Strapi via the `getGalleryItems` service
- Supports both video and image media types
- Videos autoplay and loop when their slide is active
- Carousel auto-advances every 10 seconds

### Link Handling
- Each gallery item can have a `LinkURL` field in Strapi
- **Internal links** (starting with `/`) use Next.js `<Link>` for client-side navigation in the same tab
- **External links** (starting with `http` and not matching the site domain) open in a new tab
- Absolute URLs pointing to your own domain are best entered as relative paths (e.g. `/upload`) for correct behavior

#### Example Link Handling Logic
```js
const isInternal = item.linkUrl && item.linkUrl.startsWith('/');
// For internal links, use <Link href={item.linkUrl}>...</Link>
// For external links, use <a href={item.linkUrl} target="_blank" rel="noopener noreferrer">...</a>
```

### Best Practices for LinkURL in Strapi
- **Internal navigation:** Enter as `/your-path` (e.g. `/upload`)
- **External navigation:** Enter as full URL (e.g. `https://youtube.com/...`)
- Avoid using absolute URLs for your own site (e.g. `http://localhost:3000/upload`); use relative paths instead

### Media URL Normalization
- All media URLs are normalized to use the CloudFront CDN for proper CORS/COEP headers
- Videos and images will not display if served directly from S3 without the correct headers

### Example Gallery Item in Strapi
- Title: `My Video`
- Type: `video`
- MediaUrl: `https://d1r94114aksajj.cloudfront.net/uploads/myvideo.mp4`
- LinkURL: `/upload` (internal) or `https://youtube.com/...` (external)

### Troubleshooting
- If videos/images do not display, check that the MediaUrl is using the CDN domain and not a direct S3 link
- For internal navigation, ensure LinkURL is a relative path
- For external navigation, ensure LinkURL is a full URL

## Stems 2.0: New Implementation Plan (May 2025)

### Overview
Stems are being reintroduced with a new, scalable, and user-focused approach. This plan outlines the requirements and technical direction for the new stems system.

### Key Requirements
- **Purchasable Stems:**
  - Each stem costs 1.99 EUR.
  - Users can buy all stems for a track as a bundle (25% discount).
  - No custom bundles; bundle = all stems for a track.
- **Formats:**
  - Each stem is available in both MP3 and WAV formats.
  - After purchase, users can download either or both formats.
- **Scalability:**
  - Tracks may have 2–10 stems each; site-wide, there may be hundreds or thousands of stems.
  - The system must be highly performant and dynamic.
- **Mixing & Synchronization:**
  - Users can mute/solo stems and scrub through the track.
  - All stems are always perfectly synchronized (including during scrubbing).
- **Waveform Visualization:**
  - Waveform data for each stem is generated and stored at upload time (server-side).
  - Waveforms are displayed in the UI with zero lag.
- **UI/UX:**
  - Desktop-first, but mobile compatibility considered for the future.
  - Stems will be presented in a popup window for performance and flexibility (can be revisited later).

### Technical Approach
- **Data Model:**
  - Each stem: id, name, price, duration, parentTrackId, waveformData, audioUrls: { mp3, wav }
  - Each track: id, title, stems: Stem[]
- **Audio Engine:**
  - Use Web Audio API for synchronized playback, mute/solo, and scrubbing.
  - All stems are loaded as AudioBufferSourceNodes and started together.
  - Muting/soloing is handled by gain nodes.
- **Waveform Handling:**
  - Waveform data is generated server-side at upload and stored as JSON or image.
  - Frontend loads waveform data only when the stems UI is opened.
- **Cart & Purchase Flow:**
  - Stems can be added to cart individually or as a bundle.
  - Bundle price = (number of stems × 1.99 EUR) × 0.75.
  - After purchase, user can download any or all formats for purchased stems.

### Next Steps
1. Update Strapi schema for stems (multiple formats, waveform data, etc.)
2. Prototype audio engine (Web Audio API) for synchronized stem playback.
3. Design popup UI for stem mixing, waveform display, and download options.
4. Update upload pipeline to generate/store waveform data for each stem.

## UI Button Reference

### Stems Button in Track List
- **Location:** `src/components/AudioPlayer.tsx`
- **Function:** `renderStemsButton`
- **Lines:** ~1690+
- **Description:** This function renders the "Stems (N)" button visible in the track list (e.g., on the /explore page). To change its appearance or behavior, edit this function and its button.

## Stems Popup Technical Overview

The stems popup (modal) is a feature-rich UI for previewing, mixing, and purchasing stems for a track. Here's how it works:

### Opening the Popup
- Triggered by clicking the "Stems (N)" button in the track list (see above).
- The popup is rendered by the `StemsPopup` component (`src/components/stem/StemPopup.tsx`).

### Fetching Stems
- The parent passes the full `track` object (with `stems` array) to the popup.
- Stems are fetched from Strapi and normalized on the frontend.
- Each stem includes: id, name, price, duration, mp3Url, wavUrl, waveform data, etc.

### Waveform Fetching & Rendering
- When the popup opens, waveform JSON for each stem is fetched (if not already cached).
- Waveforms are rendered using a custom or third-party waveform component, with base color and progress color matching the main player.
- Waveform data is generated server-side at upload and stored in Strapi/S3.

### Synchronized Playback (Web Audio API)
- All stems are loaded as AudioBuffers and played in perfect sync using the Web Audio API.
- Play/Pause and seek controls affect all stems simultaneously.
- Scrubbing is sample-accurate for DAW-like precision.

### Solo/Mute (S/M) Buttons
- Each stem row has Solo (S) and Mute (M) buttons.
- Solo: Only the soloed stem(s) are audible; others are muted.
- Mute: Mutes the selected stem.
- S/M state is managed in React state and applied to gain nodes in the Web Audio API.
- S/M buttons are highly responsive due to memoization and direct gain node updates.

### Cart Integration
- Each stem row has an Add/Remove to Cart button (shopping cart icon).
- Clicking "Buy All Stems" adds all stems as a bundle to the cart (with discount) and removes individual stems for that track from the cart.
- Cart state is managed via CartContext.
- The UI shows a checkmark for stems in the cart and disables add-to-cart if the bundle is in the cart.

### Error & Loading Handling
- Loading spinners and error messages are shown if stems or waveforms fail to load.
- Audio errors (e.g., CORS, missing files) are handled gracefully, with fallback UI and simulated playback if needed.

### Other Details
- The popup is fully responsive and optimized for performance.
- Memoization and throttling are used to keep UI smooth during playback and waveform rendering.
- All URLs are normalized to use the CDN for CORS/COEP compliance.

## Header Alignment Fix (May 2025)

To ensure the top navigation menu (Home, Music, etc.) and the right group (Sign In + cart) are perfectly aligned with the main content and the carousel, the following changes were made:

1. **Header Positioning:**
   - The `Header` component was changed from `fixed` to `sticky` positioning. This allows it to remain at the top during scroll, but as part of the normal document flow.

2. **Layout Hierarchy:**
   - The `Header` was moved *inside* the `ContentWrapper` component (in `src/app/explore/page.tsx` and other relevant pages). This ensures it inherits the same `marginLeft` and `width` constraints as the main content area, which is offset by the sidebar.

3. **Style Simplification:**
   - All custom `marginLeft` and `width` styles were removed from the `Header`'s inner container. The header now uses only `px-8 w-full flex h-16 items-center` for its layout, inheriting constraints from its parent.

**Result:**
- The navigation menu is now flush with the left edge of the main content/carousel.
- The Sign In and cart group are flush with the right edge of the main content.
- The header remains visually consistent and responsive across all pages.

**Troubleshooting Note:**
If alignment issues reappear, ensure the `Header` is rendered *inside* the same layout wrapper as the main content, and avoid using absolute/fixed positioning or custom margin/width styles that break the inherited layout.

## Audio Playback Stops When Filtering Out Current Track (May 2025)

**Problem:**
When a user played a track on the /explore page and then filtered out that track using the BPM Range or Duration slider, the audio would sometimes continue playing, and sometimes the track could not be played again after filtering.

**Solution:**
A robust solution was implemented to ensure that if the currently playing track is filtered out (i.e., no longer present in the filtered track list), playback is stopped and the audio state is reset. This is achieved by:

- Tracking the currently playing track in the explore page state.
- When filters (BPM, duration, tags, or search) are applied, checking if the currently playing track is still in the filtered list.
- If not, dispatching a `stop-all-audio` event and clearing the currently playing track state.
- The `AudioPlayer` component listens for this event and stops playback, resets its state, and clears the global audio manager.

**Result:**
- When a user drags the BPM or Duration slider and the current track is filtered out, playback stops immediately.
- The track can be played again if it reappears in the filtered list.
- This ensures a seamless and bug-free user experience when filtering tracks during playback.

## Add To Cart Button Audio Playback Issue Fix (June 2025)

**Problem:**
When users clicked the "Add to Cart" buttons in the Stems popup, the main audio track on the /explore page would unexpectedly start playing. This issue created a jarring user experience, as users expected to only add items to their cart without affecting playback on the parent page.

**Root Causes:**
1. Click events on cart buttons were propagating up to parent elements
2. State changes triggered by cart operations were inadvertently causing audio playback
3. The global audio management system had no mechanism to distinguish cart operations from playback requests

**Comprehensive Solution:**
A robust, multi-layered approach was implemented:

1. **Aggressive Event Isolation:**
   - Added complete event stopping to cart buttons:
     ```tsx
     onClick={(e) => {
       e.stopPropagation();
       e.preventDefault();
       e.nativeEvent.stopImmediatePropagation();
       // ...rest of handler
     }}
     ```
   - Dispatched explicit `stop-all-audio` events when cart operations occur:
     ```tsx
     const stopEvent = new CustomEvent('stop-all-audio', { 
       detail: { source: 'stem-cart-button' } 
     });
     window.dispatchEvent(stopEvent);
     document.dispatchEvent(stopEvent);
     ```

2. **Global Audio Protection Flags:**
   - Implemented a global flag to prevent audio playback during cart operations:
     ```tsx
     (window as any).preventStemAudioPlay = true;
     ```
   - Added a timestamp system to block playback for 1.5 seconds after cart actions:
     ```tsx
     (window as any).lastCartOperationTime = Date.now();
     ```

3. **Direct Audio Manager Control:**
   - Force-paused all audio managers during cart operations:
     ```tsx
     if (globalAudioManager && globalAudioManager.activeAudio) {
       globalAudioManager.activeAudio.pause();
     }
     if (globalAudioController) globalAudioController.pause();
     if (unifiedAudioManager) unifiedAudioManager.pause();
     ```

4. **Audio Hook Safety:**
   - Added safety checks in the `useAudioPlayer` hook:
     ```tsx
     // Check for recent cart operation
     const now = Date.now();
     const lastCartOperation = (window as any).lastCartOperationTime || 0;
     if (now - lastCartOperation < 1500) {
       console.log('Audio playback prevented by recent cart operation');
       return;
     }
     ```

**Technical Results:**
- Cart operations now never trigger unwanted audio playback
- Multiple layers of protection ensure robustness against future changes
- The fix is non-invasive to the core architecture
- User experience is improved with predictable cart behavior

This solution ensures that when users interact with cart functionality in the stems popup, they experience a clean separation between cart operations and audio playback controls.

# Sticky Menu/Header Implementation and Layout Alignment

- The menu is implemented as a sticky Header component using Tailwind classes: 'sticky top-0 z-50 bg-[#121212]'.
- The Header is placed inside the main content area, not spanning the full width, and is always left-aligned with the main content (carousel/tracks grid).
- Both the /explore page and the homepage use a flex layout: sidebar and main content are siblings, and the Header is inside the main content area for consistent alignment.
- The main content area is scrollable (height: 100vh, overflow-y: auto) so the sticky menu never disappears except at the very bottom, and always reappears when scrolling up.
- The Header's z-index is set high (z-50) so overlays and play/pause buttons never cover it.
- The Header's background is fully opaque (#121212) so nothing shows through.
- All layout adjustments and alignment fixes made to ensure the menu is visually consistent and professional across all pages.
- The Header is always rendered inside the same layout wrapper as the main content, inheriting the same margin and width constraints.
- The left edge of the menu is always aligned with the left edge of the carousel/tracks grid, both on the homepage and /explore.
- The sidebar is never covered by the sticky menu, and the menu never overlaps the sidebar.
- The sticky menu provides a seamless navigation experience and is always accessible when scrolling up, even if it temporarily disappears at the very bottom of the scrollable area.
