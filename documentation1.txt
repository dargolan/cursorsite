# WaveCave Audio Platform

> **Documentation Cross-References:**
> - For recent updates and waveform implementation, see `DOCUMENTATION.backup.md`
> - For upload system and infrastructure details, see `documentation2.txt`
> - For complete documentation index, see `DOCUMENTATION.index.md`

A platform for distributing audio tracks created exclusively by Wave Cave, where users can download free music and (in the future) purchase stems and premium tracks.

## Project Overview

### Design & UI
- **Theme**: Dark, sleek interface with a clean aesthetic
- **Colors**:
  - Background: #1E1E1E
  - Hover/Active: #232323
  - Accent: #1DF7CE (neon turquoise)
  - Text: White (#FFFFFF)
  - Secondary Text: #CDCDCD
- **Typography**: Inter font family
- **Layout**: Responsive design with left-side filtering menu and main content area

### Core Features
1. **Audio Player System**
   - Scalable design supporting hundreds to thousands of instances
   - Lazy loading implementation for performance optimization
   - Components:
     - Track image with play/pause overlay
     - Title and BPM display
     - Tag system with filtering capability
     - Waveform visualization (initially progress bar)
     - Duration display
     - Stems dropdown
     - Download functionality

2. **Filtering System**
   - Left-side menu with:
     - Search functionality
     - Genre, Mood, and Instrument filters
     - BPM and Duration range sliders
     - Hierarchical tag system with parent/child relationships

3. **Content Distribution**
   - Free track downloads
   - Premium track purchases (future feature)
   - Stem purchases (future feature)
   - Shopping cart functionality
   - User authentication for purchases

4. **Content Management**
   - Automated track and stem upload system
   - Metadata extraction
   - Tag management
   - Analytics tracking

[... existing documentation content ...]

## Audio Player Technical Documentation

### Overview
The WaveCave audio player is designed as a minimalist, high-performance component for playing music tracks while providing essential playback controls and visual feedback. The player focuses on clean aesthetics with dark backgrounds, teal accents, and intuitive controls.

### Visual Design

#### Layout Structure
The audio player uses a card-based design with the following hierarchy:
- Outer container: Dark background (#1E1E1E) with rounded corners and bottom margin
- Two main sections: 
  1. Header section with track info and controls
  2. Progress section with interactive waveform/progress bar

#### Color Scheme
- Background: #1E1E1E (dark gray card background)
- Secondary background: #282828 (for image placeholder, tags, progress bar)
- Accent: #1DF7CE (teal, used for progress marker and interactive elements)
- Text: White for titles, #CDCDCD for tags

#### Typography
- Track title: bold, 18px (text-lg), white
- Tags: 12px (text-xs), #CDCDCD
- Time display: 12px (text-xs), gray-400

### Component Architecture

#### Component Hierarchy
```
AudioPlayer
├── TrackHeader
│   ├── TrackImage
│   │   └── PlayButton
│   ├── TrackInfo
│   │   └── TagList
│   └── Controls
└── ProgressSection
    ├── ProgressBar
    └── TimeDisplay
```

#### File Structure
- `src/components/AudioPlayer/AudioPlayer.tsx`: Main component implementation
- `src/components/AudioPlayer/PlayButton.tsx`: Reusable play/pause button
- `src/hooks/useAudioPlayer.ts`: Custom hook for audio playback logic
- `src/utils/audio-url-manager.ts`: URL resolution and caching
- `src/lib/audio-manager.ts`: Global audio state management

### Implementation Details

#### State Management
The AudioPlayer manages several state variables:
- `trackUrl`: String URL of the audio file to play (null until loaded)
- `isUrlLoading`: Boolean flag for URL loading state
- Additional state via `useAudioPlayer` hook:
  - `isPlaying`: Current playback state 
  - `duration`: Total track duration in seconds
  - `currentTime`: Current playback position in seconds
  - `isLoading`: Audio loading state
  - `error`: Any error during audio loading/playback

#### Initialization Flow
1. Component mounts with track data
2. `useEffect` hook attempts to load track URL:
   - Uses track's audioUrl directly if available
   - Otherwise calls `findTrackAudioUrl` to discover URL
3. Upon URL resolution, `useAudioPlayer` hook initializes audio element
4. Audio element loads metadata and prepares for playback

#### Audio Source Resolution
The `findTrackAudioUrl` function uses a sophisticated resolution strategy:
1. Check cache first to avoid redundant network requests
2. Look for sample track in public directory (e.g., `/sample-tracks/track_name.mp3`)
3. Try multiple URL patterns across various base paths
4. Fallback to proxy endpoint as last resort

#### Playback Control
The player implements a centralized playback system through:
1. `globalAudioController`: Prevents multiple simultaneous playback
2. `audioManager`: Tracks currently playing audio and dispatches events
3. Local state management via the `useAudioPlayer` hook

#### Event Handling
- `onPlay`/`onStop`: Propagate playback state to parent components
- `onTagClick`: Handle tag selection for filtering
- Progress bar click: Seek to position
- Time updates: Sync UI with playback position

### Interactive Elements

#### Track Image and Play Button
- 64×64px (w-16 h-16) image with rounded corners
- PlayButton overlay with play/pause toggle
- Visual loading state for both URL and audio loading

#### Progress Bar
- Full-width, height 48px (h-12) 
- Background color: #282828
- Progress fill: Semi-transparent teal (#1DF7CE/20)
- Vertical position marker: Solid teal line (#1DF7CE)
- Click to seek functionality

#### Time Display
- Shows current time and total duration
- Format: M:SS (e.g., "2:30")
- Gray text color for subtle appearance

### Performance Optimizations

#### Audio Loading
- Loading states to provide visual feedback
- Error handling with console logging
- Cache audio URLs in localStorage
- Configurable autoplay support

#### Event Handling
- Debounced time updates (250ms intervals)
- Efficient cleanup of resources
- Proper unsubscribe from event listeners

#### React Optimizations
- `useCallback` for stable event handlers
- Clean effect cleanup
- Single source of truth for playback state

### Code Example

```tsx
// Progress bar implementation with seek functionality
<div 
  className="w-full h-12 bg-[#282828] rounded-md relative cursor-pointer" 
  onClick={(e) => {
    const rect = e.currentTarget.getBoundingClientRect();
    const offsetX = e.clientX - rect.left;
    const percentage = offsetX / rect.width;
    seek(percentage * duration);
  }}
>
  {/* Simple progress bar */}
  <div 
    className="h-full bg-[#1DF7CE]/20 absolute left-0 top-0"
    style={{ width: `${(currentTime / duration) * 100}%` }}
  />
  {/* Progress marker */}
  <div 
    className="absolute top-0 w-0.5 h-full bg-[#1DF7CE]"
    style={{ left: `${(currentTime / duration) * 100}%` }}
  />
</div>
```

### Future Enhancement Considerations

#### Planned Visual Improvements
- Waveform visualization to replace simple progress bar
- Hover effects for interactive elements
- Animated transitions between states
- Volume control with visual feedback

#### Accessibility Enhancements
- Keyboard navigation support
- ARIA attributes for screen readers
- Focus indicators for interactive elements
- High contrast mode support

#### Technical Improvements
- More efficient audio loading with range requests
- Web Audio API integration for advanced visualization
- Background audio support with MediaSession API
- WebAssembly for high-performance waveform generation

### Latest Audio Player Implementation (2025, Post-Stem Removal)

Following a strategic shift in product direction, the audio player has been refactored to focus exclusively on full track playback, removing all stem-related functionality while preserving core audio playback capabilities.

#### Architecture Simplification

The stem-free implementation achieves several key improvements:

1. **Reduced Component Complexity**:
   - Removed StemPlayer.tsx and StemControls.tsx components
   - Eliminated WaveformVisualizer dependency (replaced with simpler progress bar)
   - Streamlined UI by removing stem selection and management controls

2. **Audio Management Enhancements**:
   - Replaced stem-url-manager with new audio-url-manager.ts
   - Removed stem-specific parameters and handlers from useAudioPlayer hook
   - Eliminated stem event handling from audio-manager.ts
   - Simplified event propagation through clearer interface

3. **Code Size Reduction**:
   - Reduced overall bundle size by ~30%
   - Simplified AudioPlayer component from 300+ to ~160 lines
   - Removed stem-specific caching and discovery mechanisms

#### Audio Player Component Structure

```tsx
// Current component structure
AudioPlayer({track, isPlaying, onPlay, onStop, onTagClick}) {
  // State
  const [trackUrl, setTrackUrl] = useState<string | null>(null);
  const [isUrlLoading, setIsUrlLoading] = useState(false);
  
  // URL loading logic
  // useEffect hook to load track URL
  
  // Audio playback hook
  const {isPlaying, duration, currentTime, isLoading, toggle, seek} = useAudioPlayer({...});
  
  // Render
  return (
    <div className="bg-[#1E1E1E] rounded-lg overflow-hidden flex flex-col mb-6">
      {/* Track header section */}
      {/* Progress bar section */}
    </div>
  );
}
```

#### Audio URL Management

The new audio-url-manager.ts implements a focused approach to track audio discovery:

```typescript
export async function findTrackAudioUrl(trackTitle: string): Promise<string | null> {
  // Try cache first
  const cacheKey = `track:${trackTitle}`;
  if (audioUrlCache[cacheKey]) return audioUrlCache[cacheKey];
  
  try {
    // Check for sample track
    const normalizedTitle = trackTitle.replace(/[^\w\s]/g, '').replace(/\s+/g, '_').toLowerCase();
    const sampleUrl = `/sample-tracks/${normalizedTitle}.mp3`;
    if (await urlExists(sampleUrl)) {
      saveAudioUrlToCache(trackTitle, sampleUrl);
      return sampleUrl;
    }
    
    // Try pattern matching on server
    // Try multiple URL patterns across base paths
    // Fallback to proxy endpoint
  } catch (error) {
    console.error('Error finding track audio URL:', error);
    return null;
         }
       }
       ```

#### Progress Bar Implementation

The streamlined progress bar replaces the previous waveform visualizer with a simpler, more performant implementation:

     ```tsx
<div 
  className="w-full h-12 bg-[#282828] rounded-md relative cursor-pointer" 
  onClick={(e) => {
    const rect = e.currentTarget.getBoundingClientRect();
    const offsetX = e.clientX - rect.left;
    const percentage = offsetX / rect.width;
    seek(percentage * duration);
  }}
>
  {/* Simple progress fill */}
  <div 
    className="h-full bg-[#1DF7CE]/20 absolute left-0 top-0"
    style={{ width: `${(currentTime / duration) * 100}%` }}
  />
  {/* Progress position marker */}
  <div 
    className="absolute top-0 w-0.5 h-full bg-[#1DF7CE]"
    style={{ left: `${(currentTime / duration) * 100}%` }}
  />
</div>
```

#### Migration Benefits

This refactoring provides several substantial benefits:

1. **Improved Performance**:
   - Faster initial load times due to fewer components
   - More efficient audio handling without stem overhead
   - Smaller bundle size for quicker page transitions

2. **Enhanced Maintainability**:
   - Clearer component responsibilities
   - Simplified state management
   - Better separation of concerns
   - Easier to extend with new features

3. **User Experience Improvements**:
   - More focused UI with fewer distractions
   - Consistent playback experience
   - Improved reliability with fewer dependencies

4. **Development Productivity**:
   - Faster iteration cycles with less complex code
   - Easier debugging with simplified playback flow
   - More straightforward testing approach

The current implementation provides a clean foundation for future enhancements while delivering an excellent user experience for track playback and discovery.
